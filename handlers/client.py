from aiogram import types, Dispatcher
from create_bot import dp, bot
from keyboards import kb_client, kb_scenario, kb_pattern, kb_home
from aiogram.dispatcher.filters import Text
from aiogram.dispatcher.filters.state import State, StatesGroup
from aiogram.dispatcher import FSMContext
from config import db
from aiogram.types import InlineKeyboardMarkup, InlineKeyboardButton


class FSMClient(StatesGroup):
    name = State()
    text = State()
    new_name = State()
    new_text = State()


async def command_start(message: types.Message):
    try:
        await bot.send_message(message.from_user.id, '–î–æ–±—Ä–æ –ø–æ–∂–∞–ª–æ–≤–∞—Ç—å, –Ω–∞–∂–º–∏—Ç–µ –Ω–∞ –∫–Ω–æ–ø–∫—É <b>"–ó–∞–ø—É—Å—Ç–∏—Ç—å —Å—Ü–µ–Ω–∞—Ä–∏–π"</b>üëá —á—Ç–æ–±—ã –ø—Ä–∏—Å—Ç—É–ø–∏—Ç—å –∫ —Ä–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞–Ω–∏—é –°–ú–° –∏ –æ—Ç–ø—Ä–∞–≤–∫–µ', reply_markup=kb_client, parse_mode='HTML')
    except:
        await message.reply('–û–±—â–µ–Ω–∏–µ —Å –±–æ—Ç–æ–º —á–µ—Ä–µ–∑ –õ–°, –Ω–∞–ø–∏—à–∏—Ç–µ –µ–º—Éüëá\n\n@my_aiogram_assist_bot')


async def select_scenario(message: types.Message):
    try:
        await bot.send_message(message.from_user.id, '–¢–µ–∫—Å—Ç –±—É–¥–µ–º –æ—Ç–ø—Ä–∞–≤–ª—è—Ç—å –∏–∑ —à–∞–±–ª–æ–Ω–∞ –∏–ª–∏ –ø–∏—à–µ–º —Ä—É–∫–∞–º–∏üëá', reply_markup=kb_scenario, parse_mode='HTML')
    except:
        await message.reply('–û–±—â–µ–Ω–∏–µ —Å –±–æ—Ç–æ–º —á–µ—Ä–µ–∑ –õ–°, –Ω–∞–ø–∏—à–∏—Ç–µ –µ–º—Éüëá\n\n@my_aiogram_assist_bot')


async def pattern_start(message: types.Message):
    try:
        await bot.send_message(message.from_user.id, '–î–æ–±–∞–≤–∏–º –Ω–æ–≤—ã–π —à–∞–±–ª–æ–Ω –∏–ª–∏ –≤–Ω–µ—Å–µ–º –ø—Ä–∞–≤–∫–∏ –≤ —Å—É—â–µ—Å—Ç–≤—É—é—â–∏–π?üëá', reply_markup=kb_pattern, parse_mode='HTML')
    except:
        await message.reply('–û–±—â–µ–Ω–∏–µ —Å –±–æ—Ç–æ–º —á–µ—Ä–µ–∑ –õ–°, –Ω–∞–ø–∏—à–∏—Ç–µ –µ–º—Éüëá\n\n@my_aiogram_assist_bot')


async def pattern_start_new(message: types.Message):
    await bot.send_message(message.from_user.id, f'–£–∫–∞–∂–∏—Ç–µ –∏–º—è —à–∞–±–ª–æ–Ω–∞üëá')
    await FSMClient.name.set()


async def send_pattern_name(message: types.Message, state: FSMContext):
    name = message.text
    await state.update_data(name=name)
    await bot.send_message(message.from_user.id, f'–ù–∞–ø–∏—à–∏—Ç–µ —Ç–µ–∫—Å—Ç —à–∞–±–ª–æ–Ω–∞üëá')
    await FSMClient.text.set()


async def send_pattern_text(message: types.Message, state: FSMContext):
    text = message.text
    await state.update_data(text=text)
    data = await state.get_data()
    db.add_pattern(name=data['name'], text=data['text'])
    await bot.send_message(message.from_user.id, f'–®–∞–±–ª–æ–Ω —É—Å–ø–µ—à–Ω–æ —Å–æ—Ö—Ä–∞–Ω–µ–Ω', reply_markup=kb_home)
    await state.finish()


async def start_change_pattern(message: types.Message):
    list_data = []
    for i in db.select_all_pattern():
        list_data.append({i[0]: i[1]})
    inkb = InlineKeyboardMarkup()
    row = []
    for x in list_data:
        pattern_key = list(x.keys())[0]
        btn = InlineKeyboardButton(text=pattern_key, callback_data=pattern_key)
        row.append(btn)
        if len(row) == 2:
            inkb.row(*row)
            row = []
    if row:
        inkb.row(*row)
    await message.answer('–í—ã–±–µ—Ä–∏—Ç–µ —à–∞–±–ª–æ–Ω —Å–æ–æ–±—â–µ–Ω–∏—èüëá', reply_markup=inkb)
    await FSMClient.new_name.set()


async def send_shablon(callback_query: types.CallbackQuery, state: FSMContext):
    name = callback_query.data
    await state.update_data(name=name)
    await callback_query.message.answer('–í–≤–µ–¥–∏—Ç–µ –Ω–æ–≤—ã–π —Ç–µ–∫—Å—Ç —à–∞–±–ª–æ–Ω–∞üëá')
    await FSMClient.new_text.set()


async def send_new_text(message: types.Message, state: FSMContext):
    text = message.text
    await state.update_data(text=text)
    data = await state.get_data()
    db.update_text(text=data['text'], name=data['name'])
    await bot.send_message(message.from_user.id, f'–¢–µ–∫—Å—Ç —É—Å–ø–µ—à–Ω–æ –∑–∞–º–µ–Ω–∏–ª', reply_markup=kb_home)
    await state.finish()


async def restart_fsm(message: types.Message, state: FSMContext = None):
    await bot.send_message(message.from_user.id, '–º–∞—à–∏–Ω–∞ —Å–æ—Å—Ç–æ—è–Ω–∏–π —Å–±—Ä–æ—à–µ–Ω–∞ - –¥–µ–ª–∞–π —á—Ç–æ —Ö–æ—á–µ—à—åüòè', reply_markup=kb_home)
    if state:
        await state.finish()


def register_handlers_client(dp: Dispatcher):
    dp.register_message_handler(command_start, commands=['start', 'help'])
    dp.register_message_handler(command_start, Text(equals='‚úç–ù–∞ –≥–ª–∞–≤–Ω—É—é', ignore_case=True))
    dp.register_message_handler(restart_fsm, commands=['restart_fsm'], state='*')
    dp.register_message_handler(select_scenario, Text(equals='üì©–ó–∞–ø—É—Å—Ç–∏—Ç—å —Å—Ü–µ–Ω–∞—Ä–∏–π', ignore_case=True), state=None)
    dp.register_message_handler(pattern_start, Text(equals='üõ†–†–∞–±–æ—Ç–∞ —Å —à–∞–±–ª–æ–Ω–∞–º–∏ —Å–º—Å', ignore_case=True))
    dp.register_message_handler(pattern_start_new, Text(equals='üÜï–ù–æ–≤—ã–π —à–∞–±–ª–æ–Ω', ignore_case=True), state=None)
    dp.register_message_handler(send_pattern_name, state=FSMClient.name)
    dp.register_message_handler(send_pattern_text, state=FSMClient.text)
    dp.register_message_handler(start_change_pattern, Text(equals='üî®–í–Ω–æ—Å–∏–º –ø—Ä–∞–≤–∫–∏', ignore_case=True), state=None)

    dp.register_callback_query_handler(send_shablon, state=FSMClient.new_name)
    dp.register_message_handler(send_new_text, state=FSMClient.new_text)